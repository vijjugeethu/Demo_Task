{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\react-Wowcher-Test (1)\\\\react-Wowcher-Test-v2.0\\\\react-Wowcher-Test\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\n\nconst formatNumber = number => new Intl.NumberFormat(\"en\", {\n  minimumFractionDigits: 2\n}).format(number);\n\nconst urls = ['api/branch1.json', 'api/branch2.json', 'api/branch3.json'];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchSpace = event => {\n      let keyword = event.target.value;\n      this.setState({\n        search: keyword\n      });\n    };\n\n    this.componentDidMount = () => {\n      Promise.all(urls.map(url => axios.get(url))).then(response => {\n        // console.log(\"dat00000000000000000000000\"+JSON.stringify(response[0].data));\n        // Log the data to the console\n        // You would do something with both sets of data here\n        this.setState({\n          products: '[' + response[0].data + ']'\n        });\n        alert('products' + this.state.products);\n        console.log('data' + response[0].data);\n      }).catch(function (error) {\n        // if there's an error, log it\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      products: [],\n      sum: [],\n      search: null\n    };\n  }\n\n  render() {\n    const products = this.state;\n    alert(\"products\" + JSON.stringify(products.products)); // console.log('total',JSON.stringify(products))\n\n    /* const ProductTotal = products.products.filter((data)=>{\n               if(this.state.search == null)\n                 return data\n               else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n                 return data\n         }\n         }).reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n     console.log('total',JSON.stringify(ProductTotal)) */\n    // const ProductTotal1 = products.products.map(({ products }) => {\n    //   return products.reduce((prev, { unitPrice }) => {\n    //     return +prev['unitPrice'].replace(/,/g, '') +  +unitPrice.replace(/,/g, '');\n    //   });\n    // });\n    // const total = ProductTotal1.reduce((prev, next) => prev + next);\n    // console.log(total);\n\n    /*  const ProductTotal = products.products.filter((data)=>{\n        if(this.state.search == null)\n          return data\n        else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n          return data\n        }\n      });*/\n\n    let ProductTotal;\n    console.log(\"this.state.search\" + this.state.search);\n\n    if (this.state.search == null) {\n      ProductTotal = products.products;\n    } else {\n      ProductTotal = products.products.reduce((acc, data) => {\n        const ch = data.products && data.products.filter(b => b.name.toString().toLowerCase().includes(this.state.search.toString().toLowerCase()));\n        console.log(\"ch=====\" + JSON.stringify(ch));\n        if (ch && ch.length) acc.push({ ...data,\n          products: ch\n        });\n        return acc;\n      }, []);\n    }\n\n    console.log(\"ProductTotal\" + JSON.stringify(ProductTotal));\n    const branchWisRevenue = ProductTotal.reduce((acc, course) => {\n      acc[course.branchId] = course.products.reduce((acc, el) => acc + el.unitPrice, 0);\n      return acc;\n    }, {});\n    var branchWisRevenueArr = Object.values(branchWisRevenue);\n    const sum_all = branchWisRevenueArr.reduce((sum, sum_one) => sum + sum_one, 0); // this.setState({ sum: sum});\n\n    /* console.log(\"Sum****\"+JSON.stringify(sum));\n     const exercises_courses = products.products.map(item => {\n       item.products.reduce((sum, part) => sum + part.unitPrice, 0);\n       return sum;\n     })*/\n    //const sum_all = exercises_courses.reduce((sum, sum_one) => sum + sum_one, 0);\n\n    console.log(\"newdata============\" + sum_all); ////console.log(JSON.stringify(exercises_courses));\n    //const latest = newdata.reduce((sum, sum_one) => sum + sum_one, 0);\n    //console.log(\"sum all============\"+JSON.stringify(latest));\n    ///////search/////////////////\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"product-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, \"Search Products\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.searchSpace(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, \"Product\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, \"Revenue\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, ProductTotal.map((item, index) => item.products.map((c, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 19\n      }\n    }, c.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, formatNumber(c.unitPrice)))))), /*#__PURE__*/React.createElement(\"tfoot\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, \"Total\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, formatNumber(sum_all))))));\n  }\n\n}\n\nexport default App; // {\n//   this.state.todos && \n//   Object.keys(icon).map(function (element) {\n//      return <tr>\n//        <td>{element}</td>\n//        <td>{icon[element]}</td>\n//      </tr>;\n//     })\n// }\n/////////////\n// {products.products.map(image => <div>{image.name}</div>)}\n//    {\n//     products.products.filter((data)=>{\n//       if(this.state.search == null)\n//         return data\n//       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n//         return data\n// }\n// }).map(function (element) {\n//        return <tr>\n//          <td>{element.name}</td>\n//          <td>{element.unitPrice}</td>\n//        </tr>;\n//       })\n//   }","map":{"version":3,"sources":["C:/Users/User/Downloads/react-Wowcher-Test (1)/react-Wowcher-Test-v2.0/react-Wowcher-Test/src/App.js"],"names":["React","Component","axios","formatNumber","number","Intl","NumberFormat","minimumFractionDigits","format","urls","App","constructor","props","searchSpace","event","keyword","target","value","setState","search","componentDidMount","Promise","all","map","url","get","then","response","products","data","alert","state","console","log","catch","error","sum","render","JSON","stringify","ProductTotal","reduce","acc","ch","filter","b","name","toString","toLowerCase","includes","length","push","branchWisRevenue","course","branchId","el","unitPrice","branchWisRevenueArr","Object","values","sum_all","sum_one","e","item","index","c","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\n\nconst formatNumber = (number) => new Intl.NumberFormat(\"en\", { minimumFractionDigits: 2 }).format(number);\nconst urls = [\n  'api/branch1.json',\n  'api/branch2.json',\n  'api/branch3.json'\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: [],\n      sum: [],\n      search:null\n    };  \n  }\n\n  searchSpace=(event)=>{\n    let keyword = event.target.value;\n    this.setState({search:keyword})\n  }\n\n  componentDidMount = () => {\n    Promise.all(\n      urls.map(url =>\n        axios.get(url)\n      )).then(response => {\n     // console.log(\"dat00000000000000000000000\"+JSON.stringify(response[0].data));\n      // Log the data to the console\n      // You would do something with both sets of data here\n      this.setState({ products: '['+response[0].data+']' });\n      alert('products'+this.state.products)\n      console.log('data'+response[0].data);\n    }).catch(function (error) {\n      // if there's an error, log it\n      console.log(error);\n    });\n\n\n  }\n  \n  render() {\n    const products = this.state\n    alert(\"products\"+JSON.stringify(products.products));\n   // console.log('total',JSON.stringify(products))\n    \n   /* const ProductTotal = products.products.filter((data)=>{\n              if(this.state.search == null)\n                return data\n              else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n                return data\n        }\n        }).reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n    console.log('total',JSON.stringify(ProductTotal)) */\n\n    // const ProductTotal1 = products.products.map(({ products }) => {\n    //   return products.reduce((prev, { unitPrice }) => {\n    //     return +prev['unitPrice'].replace(/,/g, '') +  +unitPrice.replace(/,/g, '');\n    //   });\n    // });\n\n    // const total = ProductTotal1.reduce((prev, next) => prev + next);\n\n    // console.log(total);\n\n  /*  const ProductTotal = products.products.filter((data)=>{\n      if(this.state.search == null)\n        return data\n      else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        return data\n      }\n    });*/\nlet ProductTotal;\nconsole.log(\"this.state.search\"+this.state.search);\n    if(this.state.search == null) {\n      ProductTotal = products.products;\n    } else {\n      ProductTotal = products.products.reduce((acc,data)=>{\n        const ch = data.products && data.products.filter(b => \n          b.name.toString().toLowerCase().includes(this.state.search.toString().toLowerCase()));\n          console.log(\"ch=====\"+JSON.stringify(ch));\n        if(ch && ch.length) acc.push({...data, products: ch});\n        return acc;\n      },[]);\n    }\n    console.log(\"ProductTotal\"+JSON.stringify(ProductTotal));\n\n    const branchWisRevenue = ProductTotal.reduce((acc, course) => {\n      acc[course.branchId] = course.products.reduce((acc, el) => acc + el.unitPrice, 0);\n      return acc;\n\n    }, {});\n    var branchWisRevenueArr = Object.values(branchWisRevenue);\n    const sum_all = branchWisRevenueArr.reduce((sum, sum_one) => sum + sum_one, 0);\n    // this.setState({ sum: sum});\n   /* console.log(\"Sum****\"+JSON.stringify(sum));\n    const exercises_courses = products.products.map(item => {\n      item.products.reduce((sum, part) => sum + part.unitPrice, 0);\n      return sum;\n    })*/\n    //const sum_all = exercises_courses.reduce((sum, sum_one) => sum + sum_one, 0);\n\n    \n    console.log(\"newdata============\"+sum_all);\n    ////console.log(JSON.stringify(exercises_courses));\n\n    //const latest = newdata.reduce((sum, sum_one) => sum + sum_one, 0);\n    //console.log(\"sum all============\"+JSON.stringify(latest));\n    ///////search/////////////////\n\n    \n\n    return (\n      <div className=\"product-list\">\n        <label>Search Products</label>\n        <input type=\"text\" onChange={(e)=>this.searchSpace(e)}/>\n        \n        <table>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>Revenue</th>\n          </tr>\n        </thead>\n        <tbody>\n         \n          {ProductTotal.map((item, index) => (\n            \n              item.products.map((c, i) => (\n                <tr key={i}>\n                  <td>{c.name}</td>\n                  <td>{formatNumber(c.unitPrice)}</td>\n                \n                </tr>\n              ))\n           \n          ))}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td>Total</td>\n            <td>{formatNumber(sum_all)}</td>\n          </tr>\n        </tfoot>\n      </table>\n      \n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n\n // {\n          //   this.state.todos && \n          //   Object.keys(icon).map(function (element) {\n          //      return <tr>\n          //        <td>{element}</td>\n          //        <td>{icon[element]}</td>\n          //      </tr>;\n          //     })\n          // }\n          /////////////\n           // {products.products.map(image => <div>{image.name}</div>)}\n\n        //    {\n        //     products.products.filter((data)=>{\n        //       if(this.state.search == null)\n        //         return data\n        //       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        //         return data\n        // }\n        // }).map(function (element) {\n        //        return <tr>\n        //          <td>{element.name}</td>\n        //          <td>{element.unitPrice}</td>\n        //        </tr>;\n        //       })\n        //   }"]},"metadata":{},"sourceType":"module"}