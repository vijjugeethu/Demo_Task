{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\react-Wowcher-Test (1)\\\\react-Wowcher-Test-v2.0\\\\react-Wowcher-Test\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\n\nconst formatNumber = number => new Intl.NumberFormat(\"en\", {\n  minimumFractionDigits: 2\n}).format(number);\n\nconst urls = ['api/branch1.json', 'api/branch2.json', 'api/branch3.json'];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchSpace = event => {\n      let keyword = event.target.value;\n      this.setState({\n        search: keyword\n      });\n    };\n\n    this.componentDidMount = () => {\n      axios.all(urls.map(url => axios.get(url))).then(response => {\n        let prod = [];\n        prod.push(response[0].data); // Log the data to the console\n        // You would do something with both sets of data here\n\n        this.setState({\n          products: prod\n        });\n        console.log('products' + this.state.products);\n        console.log('data' + prod);\n      }).catch(function (error) {\n        // if there's an error, log it\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      products: [],\n      sum: [],\n      search: null\n    };\n  }\n\n  render() {\n    const products = this.state;\n    console.log('total', JSON.stringify(products));\n    /* const ProductTotal = products.products.filter((data)=>{\n               if(this.state.search == null)\n                 return data\n               else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n                 return data\n         }\n         }).reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n     console.log('total',JSON.stringify(ProductTotal)) */\n    // const ProductTotal1 = products.products.map(({ products }) => {\n    //   return products.reduce((prev, { unitPrice }) => {\n    //     return +prev['unitPrice'].replace(/,/g, '') +  +unitPrice.replace(/,/g, '');\n    //   });\n    // });\n    // const total = ProductTotal1.reduce((prev, next) => prev + next);\n    // console.log(total);\n\n    /*  const ProductTotal = products.products.filter((data)=>{\n        if(this.state.search == null)\n          return data\n        else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n          return data\n        }\n      });*/\n\n    let ProductTotal;\n\n    if (this.state.search == null) {\n      ProductTotal = products.products;\n    } else {\n      ProductTotal = products.products.reduce((acc, data) => {\n        const ch = data.products && data.products.filter(b => b.name.toString().toLowerCase().includes(this.state.search.toString().toLowerCase()));\n        if (ch && ch.length) acc.push({ ...data,\n          products: ch\n        });\n        return acc;\n      }, []);\n    }\n\n    const branchWisRevenue = ProductTotal.reduce((acc, course) => {\n      acc[course.branchId] = course.products.reduce((acc, el) => acc + el.unitPrice, 0);\n      return acc;\n    }, {});\n    var branchWisRevenueArr = Object.values(branchWisRevenue);\n    const sum_all = branchWisRevenueArr.reduce((sum, sum_one) => sum + sum_one, 0); // this.setState({ sum: sum});\n\n    /* console.log(\"Sum****\"+JSON.stringify(sum));\n     const exercises_courses = products.products.map(item => {\n       item.products.reduce((sum, part) => sum + part.unitPrice, 0);\n       return sum;\n     })*/\n    //const sum_all = exercises_courses.reduce((sum, sum_one) => sum + sum_one, 0);\n    ////console.log(JSON.stringify(exercises_courses));\n    //const latest = newdata.reduce((sum, sum_one) => sum + sum_one, 0);\n    //console.log(\"sum all============\"+JSON.stringify(latest));\n    ///////search/////////////////\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"product-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, \"Search Products\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.searchSpace(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, \"Product\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, \"Revenue\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, ProductTotal.map((item, index) => item.products.map((c, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 19\n      }\n    }, formatNumber(c.unitPrice)))))), /*#__PURE__*/React.createElement(\"tfoot\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, \"Total\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, formatNumber(sum_all))))));\n  }\n\n}\n\nexport default App; // {\n//   this.state.todos && \n//   Object.keys(icon).map(function (element) {\n//      return <tr>\n//        <td>{element}</td>\n//        <td>{icon[element]}</td>\n//      </tr>;\n//     })\n// }\n/////////////\n// {products.products.map(image => <div>{image.name}</div>)}\n//    {\n//     products.products.filter((data)=>{\n//       if(this.state.search == null)\n//         return data\n//       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n//         return data\n// }\n// }).map(function (element) {\n//        return <tr>\n//          <td>{element.name}</td>\n//          <td>{element.unitPrice}</td>\n//        </tr>;\n//       })\n//   }","map":{"version":3,"sources":["C:/Users/User/Downloads/react-Wowcher-Test (1)/react-Wowcher-Test-v2.0/react-Wowcher-Test/src/App.js"],"names":["React","Component","axios","formatNumber","number","Intl","NumberFormat","minimumFractionDigits","format","urls","App","constructor","props","searchSpace","event","keyword","target","value","setState","search","componentDidMount","all","map","url","get","then","response","prod","push","data","products","console","log","state","catch","error","sum","render","JSON","stringify","ProductTotal","reduce","acc","ch","filter","b","name","toString","toLowerCase","includes","length","branchWisRevenue","course","branchId","el","unitPrice","branchWisRevenueArr","Object","values","sum_all","sum_one","e","item","index","c","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\n\nconst formatNumber = (number) => new Intl.NumberFormat(\"en\", { minimumFractionDigits: 2 }).format(number);\nconst urls = [\n  'api/branch1.json',\n  'api/branch2.json',\n  'api/branch3.json'\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: [],\n      sum: [],\n      search:null\n    };  \n  }\n\n  searchSpace=(event)=>{\n    let keyword = event.target.value;\n    this.setState({search:keyword})\n  }\n\n  componentDidMount = () => {\n    axios.all(\n      urls.map(url =>\n        axios.get(url)\n      )).then(response => {\n      let prod = []\n      prod.push(response[0].data);\n      // Log the data to the console\n      // You would do something with both sets of data here\n      this.setState({ products: prod });\n      console.log('products'+this.state.products)\n      console.log('data'+prod);\n    }).catch(function (error) {\n      // if there's an error, log it\n      console.log(error);\n    });\n\n\n  }\n  \n  render() {\n    const products = this.state\n    console.log('total',JSON.stringify(products))\n    \n   /* const ProductTotal = products.products.filter((data)=>{\n              if(this.state.search == null)\n                return data\n              else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n                return data\n        }\n        }).reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n    console.log('total',JSON.stringify(ProductTotal)) */\n\n    // const ProductTotal1 = products.products.map(({ products }) => {\n    //   return products.reduce((prev, { unitPrice }) => {\n    //     return +prev['unitPrice'].replace(/,/g, '') +  +unitPrice.replace(/,/g, '');\n    //   });\n    // });\n\n    // const total = ProductTotal1.reduce((prev, next) => prev + next);\n\n    // console.log(total);\n\n  /*  const ProductTotal = products.products.filter((data)=>{\n      if(this.state.search == null)\n        return data\n      else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        return data\n      }\n    });*/\nlet ProductTotal;\n    if(this.state.search == null) {\n      ProductTotal = products.products;\n    } else {\n      ProductTotal = products.products.reduce((acc,data)=>{\n        const ch = data.products && data.products.filter(b => \n          b.name.toString().toLowerCase().includes(this.state.search.toString().toLowerCase()));\n        if(ch && ch.length) acc.push({...data, products: ch});\n        return acc;\n      },[]);\n    }\n\n    const branchWisRevenue = ProductTotal.reduce((acc, course) => {\n      acc[course.branchId] = course.products.reduce((acc, el) => acc + el.unitPrice, 0);\n      return acc;\n\n    }, {});\n    var branchWisRevenueArr = Object.values(branchWisRevenue);\n    const sum_all = branchWisRevenueArr.reduce((sum, sum_one) => sum + sum_one, 0);\n    // this.setState({ sum: sum});\n   /* console.log(\"Sum****\"+JSON.stringify(sum));\n    const exercises_courses = products.products.map(item => {\n      item.products.reduce((sum, part) => sum + part.unitPrice, 0);\n      return sum;\n    })*/\n    //const sum_all = exercises_courses.reduce((sum, sum_one) => sum + sum_one, 0);\n    ////console.log(JSON.stringify(exercises_courses));\n\n    //const latest = newdata.reduce((sum, sum_one) => sum + sum_one, 0);\n    //console.log(\"sum all============\"+JSON.stringify(latest));\n    ///////search/////////////////\n\n    \n\n    return (\n      <div className=\"product-list\">\n        <label>Search Products</label>\n        <input type=\"text\" onChange={(e)=>this.searchSpace(e)}/>\n        \n        <table>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>Revenue</th>\n          </tr>\n        </thead>\n        <tbody>\n         \n          {ProductTotal.map((item, index) => (\n            \n              item.products.map((c, i) => (\n                <tr key={i}>\n                  \n                  <td>{formatNumber(c.unitPrice)}</td>\n                \n                </tr>\n              ))\n           \n          ))}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td>Total</td>\n            <td>{formatNumber(sum_all)}</td>\n          </tr>\n        </tfoot>\n      </table>\n      \n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n\n // {\n          //   this.state.todos && \n          //   Object.keys(icon).map(function (element) {\n          //      return <tr>\n          //        <td>{element}</td>\n          //        <td>{icon[element]}</td>\n          //      </tr>;\n          //     })\n          // }\n          /////////////\n           // {products.products.map(image => <div>{image.name}</div>)}\n\n        //    {\n        //     products.products.filter((data)=>{\n        //       if(this.state.search == null)\n        //         return data\n        //       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        //         return data\n        // }\n        // }).map(function (element) {\n        //        return <tr>\n        //          <td>{element.name}</td>\n        //          <td>{element.unitPrice}</td>\n        //        </tr>;\n        //       })\n        //   }"]},"metadata":{},"sourceType":"module"}